import React, { useState, useRef } from 'react';
import { Popover, Button } from '@mui/material';

type Point = { x: number; y: number };
type Line = { start: Point; end: Point; distance: number };

const LinePopoverComponent = () => {
  const [lines, setLines] = useState<Line[]>([
    { start: { x: 50, y: 60 }, end: { x: 200, y: 220 }, distance: 212.1 },
    { start: { x: 100, y: 100 }, end: { x: 300, y: 120 }, distance: 201.0 },
  ]);

  const [anchorEl, setAnchorEl] = useState<SVGLineElement | null>(null);
  const [selectedLineIndex, setSelectedLineIndex] = useState<number | null>(null);
  const longPressTimer = useRef<NodeJS.Timeout | null>(null);

  // Long press start
  const handlePressStart = (
    event: React.MouseEvent<SVGLineElement> | React.TouchEvent<SVGLineElement>,
    index: number
  ) => {
    // Prevent mouse events after touch
    event.preventDefault();

    const target = event.currentTarget as SVGLineElement;

    longPressTimer.current = setTimeout(() => {
      setAnchorEl(target);
      setSelectedLineIndex(index);
    }, 500); // 500ms long press
  };

  // Cancel if touch/mouse ends before long press triggers
  const handlePressEnd = () => {
    if (longPressTimer.current) {
      clearTimeout(longPressTimer.current);
      longPressTimer.current = null;
    }
  };

  const handleClose = () => {
    setAnchorEl(null);
    setSelectedLineIndex(null);
  };

  const deleteLine = () => {
    if (selectedLineIndex !== null) {
      const updated = [...lines];
      updated.splice(selectedLineIndex, 1);
      setLines(updated);
    }
    handleClose();
  };

  return (
    <div>
      <svg width="100%" height="400px" style={{ border: '1px solid #ccc' }}>
        {lines.map((line, index) => (
          <g key={index}>
            <line
              x1={line.start.x}
              y1={line.start.y}
              x2={line.end.x}
              y2={line.end.y}
              stroke="black"
              strokeWidth={2}
              onMouseDown={(e) => handlePressStart(e, index)}
              onTouchStart={(e) => handlePressStart(e, index)}
              onMouseUp={handlePressEnd}
              onMouseLeave={handlePressEnd}
              onTouchEnd={handlePressEnd}
              style={{ cursor: 'pointer' }}
            />
            <text
              x={(line.start.x + line.end.x) / 2}
              y={(line.start.y + line.end.y) / 2 - 5}
              fill="red"
              fontSize={12}
              pointerEvents="none"
            >
              {line.distance.toFixed(2)}
            </text>
          </g>
        ))}
      </svg>

      <Popover
        open={Boolean(anchorEl)}
        anchorEl={anchorEl}
        onClose={handleClose}
        anchorOrigin={{
          vertical: 'top',
          horizontal: 'center',
        }}
      >
        <Button onClick={deleteLine} color="error">
          Delete Line
        </Button>
      </Popover>
    </div>
  );
};

export default LinePopoverComponent;
