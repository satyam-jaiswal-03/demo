const convertImage = async () => {
  const src = 'your-image-src-here'; // e.g., from state, props, or a ref
  try {
    const base64 = await imageSrcToBase64(src);
    console.log('Base64 string:', base64);
    // Use base64 as needed
  } catch (err) {
    console.error('Failed to convert image:', err);
  }
};



const imageSrcToBase64 = (src: string): Promise<string> => {
  return new Promise((resolve, reject) => {
    const img = new Image();
    img.crossOrigin = 'anonymous'; // Needed for cross-origin images

    img.onload = () => {
      const canvas = document.createElement('canvas');
      canvas.width = img.width;
      canvas.height = img.height;

      const ctx = canvas.getContext('2d');
      if (!ctx) return reject('Canvas context not available');

      ctx.drawImage(img, 0, 0);
      const dataURL = canvas.toDataURL('image/png');
      resolve(dataURL);
    };

    img.onerror = (err) => reject(err);
    img.src = src;
  });
};
