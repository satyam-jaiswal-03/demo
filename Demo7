import cv2
import time
from ultralytics import YOLO
from deep_sort_realtime.deepsort_tracker import DeepSort

# Initialize YOLOv10
model = YOLO("yolov10s.pt")  # Replace with your best yolov10 model
model.fuse()

# Initialize DeepSORT
tracker = DeepSort(max_age=30)

# Open webcam
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("Failed to open camera")
    exit(1)

selected_id = None

def click_event(event, x, y, flags, param):
    global selected_id
    if event == cv2.EVENT_LBUTTONDOWN:
        # User clicked → check which tracked object was clicked
        for track_id, track in param.items():
            l, t, w, h = track[0]
            if l < x < l + w and t < y < t + h:
                selected_id = track_id
                print(f"[Selected object ID]: {selected_id}")

cv2.namedWindow("Object Tracking")
cv2.setMouseCallback("Object Tracking", click_event, {})

while True:
    start_time = time.time()
    ret, frame = cap.read()
    if not ret:
        break

    results = model(frame, verbose=False)[0]

    detections = []
    for box in results.boxes:
        x1, y1, x2, y2 = map(int, box.xyxy[0])
        conf = box.conf[0].item()
        cls = int(box.cls[0].item())
        detections.append(([x1, y1, x2 - x1, y2 - y1], conf, cls))

    tracks = tracker.update_tracks(detections, frame=frame)
    tracked_objects = {}  # for updating mouse callback

    found_selected = False  # flag if selected object is in frame

    for track in tracks:
        if not track.is_confirmed():
            continue
        track_id = track.track_id
        l, t, w, h = map(int, track.to_ltrb())
        tracked_objects[track_id] = [(l, t, w, h)]

        if selected_id is None:
            # PHASE 1: draw boxes around all detected objects
            cv2.rectangle(frame, (l, t), (l + w, t + h), (255, 0, 0), 2)
            cv2.putText(frame, f"ID:{track_id}", (l, t - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 0, 0), 2)

        elif track_id == selected_id:
            # PHASE 2: draw box only around selected object
            found_selected = True
            cv2.rectangle(frame, (l, t), (l + w, t + h), (0, 255, 0), 2)
            cv2.putText(frame, f"ID:{track_id}", (l, t - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

    if selected_id is not None and not found_selected:
        # if selected object is currently not in frame → don't draw anything
        pass

    cv2.setMouseCallback("Object Tracking", click_event, tracked_objects)

    # FPS calculation
    end_time = time.time()
    fps = 1.0 / (end_time - start_time + 1e-6)
    cv2.putText(frame, f"FPS: {fps:.2f}", (20, 30),
                cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 2)

    cv2.imshow("Object Tracking", frame)
    if cv2.waitKey(1) & 0xFF == 27:  # ESC to exit
        break

cap.release()
cv2.destroyAllWindows()
