import cv2
import numpy as np
from ultralytics import YOLO
from deep_sort_realtime.deepsort_tracker import DeepSort

# Load YOLOv8 model (best accuracy -> yolov8m.pt or yolov8l.pt; or yolov8x.pt if you have GPU power)
model = YOLO('yolov8m.pt')  

# Initialize DeepSORT
tracker = DeepSort(max_age=30)  # Tracks disappear if lost >30 frames

# Open webcam
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("Could not open webcam")
    exit()

selected_id = None

def click_event(event, x, y, flags, param):
    global selected_id
    if event == cv2.EVENT_LBUTTONDOWN:
        for track in param:
            track_id, tlwh, cls = track
            x1, y1, w, h = tlwh
            x2, y2 = x1 + w, y1 + h
            if x1 <= x <= x2 and y1 <= y <= y2:
                selected_id = track_id
                print(f"Selected object with track ID: {selected_id}")
                break

cv2.namedWindow("Object Detection")
cv2.setMouseCallback("Object Detection", click_event, param=[])

while True:
    ret, frame = cap.read()
    if not ret:
        break

    results = model(frame)[0]

    detections = []
    for r in results.boxes:
        x1, y1, x2, y2 = r.xyxy[0].cpu().numpy()
        cls = int(r.cls[0])
        conf = float(r.conf[0])
        detections.append(([x1, y1, x2 - x1, y2 - y1], conf, cls))

    tracks = tracker.update_tracks(detections, frame=frame)

    mouse_tracks = []

    for track in tracks:
        if not track.is_confirmed():
            continue
        track_id = track.track_id
        ltrb = track.to_ltrb()
        x1, y1, x2, y2 = map(int, ltrb)
        cls = track.det_class

        if selected_id is None:
            # draw all tracks
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
            cv2.putText(frame, f"ID {track_id}", (x1, y1-5),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0,255,0), 2)
        elif selected_id == track_id:
            # draw only selected track
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 0, 255), 3)
            cv2.putText(frame, f"TRACKING ID {track_id}", (x1, y1-5),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0,0,255), 2)

        mouse_tracks.append((track_id, track.to_tlwh(), cls))

    # update mouse callback param with current tracks
    cv2.setMouseCallback("Object Detection", click_event, param=mouse_tracks)

    cv2.imshow("Object Detection", frame)

    key = cv2.waitKey(1) & 0xFF
    if key == ord('q'):
        break
    elif key == ord('r'):
        print("Reset selection")
        selected_id = None

cap.release()
cv2.destroyAllWindows()
