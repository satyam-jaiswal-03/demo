import cv2
import numpy as np
import time
from ultralytics import YOLO
from deep_sort_realtime.deepsort_tracker import DeepSort

model = YOLO("yolov8n.pt")
tracker = DeepSort(max_age=60, n_init=2)

cap = cv2.VideoCapture(0)
if not cap.isOpened():
    exit()

selected_id = None
cv2.namedWindow("Tracking")

def click_event(event, x, y, flags, param):
    global selected_id
    if event == cv2.EVENT_LBUTTONDOWN:
        tracks = param
        for trk in tracks:
            x1, y1, x2, y2, track_id = trk
            if x1 <= x <= x2 and y1 <= y <= y2:
                selected_id = track_id
                print(f"Selected ID: {selected_id}")
                break

cv2.setMouseCallback("Tracking", click_event, param=[])

prev_time = time.time()

while True:
    ret, frame = cap.read()
    if not ret:
        break

    frame_small = cv2.resize(frame, (416, 320))

    results = model(frame_small, verbose=False, imgsz=320)[0]
    detections = []
    for box in results.boxes:
        x1, y1, x2, y2 = box.xyxy[0].cpu().numpy()
        conf = box.conf[0]
        cls = int(box.cls[0])
        if conf < 0.3:
            continue
        scale_x = frame.shape[1] / frame_small.shape[1]
        scale_y = frame.shape[0] / frame_small.shape[0]
        x1, y1, x2, y2 = x1 * scale_x, y1 * scale_y, x2 * scale_x, y2 * scale_y
        detections.append(([x1, y1, x2 - x1, y2 - y1], conf, cls))

    tracks = tracker.update_tracks(detections, frame=frame)
    current_tracks = []
    selected_found = False
    for track in tracks:
        if not track.is_confirmed() or track.time_since_update > 1:
            continue
        track_id = track.track_id
        ltrb = track.to_ltrb()
        x1, y1, x2, y2 = map(int, ltrb)
        current_tracks.append((x1, y1, x2, y2, track_id))
        if selected_id is not None and track_id == selected_id:
            selected_found = True
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 0, 255), 3)
            cv2.putText(frame, f"ID {track_id}", (x1, y1 - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)

    cv2.setMouseCallback("Tracking", click_event, param=current_tracks)

    if selected_id is None:
        for x1, y1, x2, y2, track_id in current_tracks:
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
            cv2.putText(frame, f"ID {track_id}", (x1, y1 - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

    current_time = time.time()
    fps = 1 / (current_time - prev_time)
    prev_time = current_time
    cv2.putText(frame, f"FPS: {fps:.1f}", (20, 40), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)

    cv2.imshow("Tracking", frame)
    key = cv2.waitKey(1) & 0xFF
    if key == ord('q'):
        break
    elif key == ord('r'):
        selected_id = None

cap.release()
cv2.destroyAllWindows()
