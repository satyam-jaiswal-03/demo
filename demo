const videoRef = useRef<HTMLVideoElement | null>(null);
  const [imageBase64, setImageBase64] = useState<string | null>(null);
  const [photoSaved, setPhotoSaved] = useState(false);
  const [isCameraReady, setIsCameraReady] = useState(false);
  const streamRef = useRef<MediaStream | null>(null);

  useEffect(() => {
    const startCamera = async () => {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true });
        if (videoRef.current) {
          videoRef.current.srcObject = stream;
          await videoRef.current.play(); // Start playing
        }
        streamRef.current = stream;
      } catch (err) {
        alert('Error accessing camera: ' + (err as Error).message);
      }
    };

    startCamera();

    return () => {
      if (streamRef.current) {
        streamRef.current.getTracks().forEach((track) => track.stop());
      }
    };
  }, []);

  useEffect(() => {
    const video = videoRef.current;
    if (!video) return;

    const handleReady = () => {
      // Check if video has dimensions (optional check)
      if (video.videoWidth > 0 && video.videoHeight > 0) {
        setIsCameraReady(true);
      }
    };

    video.addEventListener('loadedmetadata', handleReady);
    video.addEventListener('canplay', handleReady);
    video.addEventListener('playing', handleReady);

    return () => {
      video.removeEventListener('loadedmetadata', handleReady);
      video.removeEventListener('canplay', handleReady);
      video.removeEventListener('playing', handleReady);
    };
  }, []);

  const takePhoto = () => {
    if (!isCameraReady) {
      alert('Camera not ready yet!');
      return;
    }

    const video = videoRef.current;
    if (!video) return;

    const canvas = document.createElement('canvas');
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    const ctx = canvas.getContext('2d');
    if (!ctx) {
      alert('Error creating canvas context');
      return;
    }

    ctx.drawImage(video, 0, 0);
    const base64 = canvas.toDataURL('image/jpeg');
    setImageBase64(base64);
    setPhotoSaved(false);
  };

  const retakePhoto = () => {
    setImageBase64(null);
    setPhotoSaved(false);
  };

  const savePhoto = () => {
    if (imageBase64) {
      localStorage.setItem('capturedPhoto', imageBase64);
      setPhotoSaved(true);
    }
  };

  return (
    <div>
      <h2>Camera Capture</h2>
