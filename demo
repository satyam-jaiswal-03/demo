import React, { useEffect, useRef, useState } from 'react';

declare const cv: any; // OpenCV.js from global script

interface DetectedShape {
  x: number;
  y: number;
  radius: number;
}

const ShapeDetector: React.FC = () => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const [cvReady, setCvReady] = useState(false);
  const [detectedShapes, setDetectedShapes] = useState<DetectedShape[]>([]);
  const [selectedBase64, setSelectedBase64] = useState<string | null>(null);

  useEffect(() => {
    if (window.cv) {
      if (cv.getBuildInformation) {
        setCvReady(true);
      } else {
        cv['onRuntimeInitialized'] = () => {
          setCvReady(true);
        };
      }
    } else {
      console.error('OpenCV.js not loaded. Make sure <script src="https://docs.opencv.org/4.x/opencv.js"></script> is in your index.html.');
    }
  }, []);

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    const img = new Image();
    img.onload = () => {
      const canvas = canvasRef.current!;
      const ctx = canvas.getContext('2d')!;
      canvas.width = img.width;
      canvas.height = img.height;
      ctx.drawImage(img, 0, 0);
      processImageWithOpenCV(canvas);
    };
    img.src = URL.createObjectURL(file);
  };

  const processImageWithOpenCV = (canvas: HTMLCanvasElement) => {
    const src = cv.imread(canvas);
    const gray = new cv.Mat();
    cv.cvtColor(src, gray, cv.COLOR_RGBA2GRAY, 0);
    cv.GaussianBlur(gray, gray, new cv.Size(9, 9), 2, 2);

    const circles = new cv.Mat();
    cv.HoughCircles(
      gray, circles, cv.HOUGH_GRADIENT, 1,
      gray.rows/8, 100, 30, 0, 0
    );

    const ctx = canvas.getContext('2d')!;
    ctx.strokeStyle = 'red';
    ctx.lineWidth = 3;

    const detected: DetectedShape[] = [];
    for (let i = 0; i < circles.cols; i++) {
      const [x, y, radius] = circles.data32F.slice(i * 3, i * 3 + 3);
      ctx.beginPath();
      ctx.ellipse(x, y, radius, radius, 0, 0, 2 * Math.PI);
      ctx.stroke();
      detected.push({ x, y, radius });
    }
    setDetectedShapes(detected);

    src.delete();
    gray.delete();
    circles.delete();
  };

  const handleCanvasClick = (e: React.MouseEvent<HTMLCanvasElement>) => {
    const rect = e.currentTarget.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;

    const clicked = detectedShapes.find(
      s => Math.hypot(s.x - x, s.y - y) <= s.radius
    );

    if (clicked) {
      const canvas = canvasRef.current!;
      const ctx = canvas.getContext('2d')!;
      const cutSize = clicked.radius * 2;
      const cutX = clicked.x - clicked.radius;
      const cutY = clicked.y - clicked.radius;
      const imageData = ctx.getImageData(cutX, cutY, cutSize, cutSize);

      const offCanvas = document.createElement('canvas');
      offCanvas.width = cutSize;
      offCanvas.height = cutSize;
      const offCtx = offCanvas.getContext('2d')!;
      offCtx.putImageData(imageData, 0, 0);

      const base64 = offCanvas.toDataURL();
      setSelectedBase64(base64);
    }
  };

  return (
    <div style={{ textAlign: 'center' }}>
      {!cvReady && <p>Loading OpenCV.js... please wait.</p>}
      {cvReady && (
        <>
          <input
            type="file"
            accept="image/*"
            ref={fileInputRef}
            onChange={handleImageUpload}
          />
          <br /><br />
          <canvas
            ref={canvasRef}
            onClick={handleCanvasClick}
            style={{ border: '1px solid black', maxWidth: '100%' }}
          />
          <br />
          {selectedBase64 && (
            <div>
              <h3>Selected Shape Cutout</h3>
              <img src={selectedBase64} alt="Selected Cutout" />
              <br />
              <button onClick={() => {
                const a = document.createElement('a');
                a.href = selectedBase64;
                a.download = 'selected_shape.png';
                a.click();
              }}>Download Cutout</button>
            </div>
          )}
        </>
      )}
    </div>
  );
};

export default ShapeDetector;
