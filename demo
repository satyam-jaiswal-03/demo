import cv2
import numpy as np

def undistort_fisheye(image, strength=0.5, zoom=1.0):
    """
    Approximate fisheye undistortion without calibration.
    
    Args:
        image: Input fisheye image.
        strength: Distortion correction strength (0.0 to 1.0).
        zoom: Zoom factor to crop (1.0 = no zoom).
    Returns:
        Undistorted image.
    """
    h, w = image.shape[:2]
    map_x = np.zeros((h, w), dtype=np.float32)
    map_y = np.zeros((h, w), dtype=np.float32)

    # Normalize coordinates to [-1, 1]
    x = (np.arange(w) - w / 2) / (w / 2)
    y = (np.arange(h) - h / 2) / (h / 2)
    xx, yy = np.meshgrid(x, y)

    # Compute radial distance from center
    r = np.sqrt(xx**2 + yy**2)
    theta = r * strength  # Empirical correction factor

    # Avoid division by zero
    mask = r != 0
    new_x = np.where(mask, (np.sin(theta) / r) * xx, xx)
    new_y = np.where(mask, (np.sin(theta) / r) * yy, yy)

    # Apply zoom
    new_x *= zoom
    new_y *= zoom

    # Convert back to pixel coordinates
    map_x = (new_x * (w / 2) + (w / 2)
    map_y = (new_y * (h / 2) + (h / 2)

    # Remap the image
    undistorted = cv2.remap(
        image, map_x, map_y, 
        interpolation=cv2.INTER_LINEAR, 
        borderMode=cv2.BORDER_CONSTANT
    )
    return undistorted

# Example usage
image = cv2.imread("fisheye_input.jpg")
undistorted = undistort_fisheye(image, strength=0.6, zoom=1.1)
cv2.imwrite("undistorted_output.jpg", undistorted)
